{"title":"Weather in Montpellier in 4 days","markdown":{"yaml":{"title":"Weather in Montpellier in 4 days"},"headingText":"Requirements","containsRefs":false,"markdown":"\n\n```{python}\n#|echo : false\nimport requests\nimport json\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom IPython.display import display, HTML\n\n# Get today's date.\ntoday_date = datetime.now()\n\n# Getting the next five days.\nlast_day = today_date + timedelta(days=4)\n\n# Formatting dates to YYYY-MM-DD.\ntoday_date_str = today_date.strftime(\"%Y-%m-%d\")\nlast_day_str = last_day.strftime(\"%Y-%m-%d\")\n\n# Creating URL\nurl = \"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum,wind_speed_10m_max&timezone=auto\"\nweather_url = f\"{url}&start_date={today_date_str}&end_date={last_day_str}\"\n\n# Send a GET request to the URL\nresponse = requests.get(weather_url)\n\nif response.status_code == 200:  # Check if the request was successful\n    data = response.json()\n    # getting the data as lists and deal with missing values :\n    # get maximum temperature\n    # temperature here is in Celsius\n    max_temp = data[\"daily\"][\"temperature_2m_max\"]\n    # return 0 if maximum temperature is None\n    max_temp = [0 if value is None else value for value in max_temp]\n    # get minimum temperature\n    # Same here the temperature is in Celsius\n\n    min_temp = data[\"daily\"][\"temperature_2m_min\"]\n    # return 0 if minimum value is\n    min_temp = [0 if value is None else value for value in min_temp]\n    # get the weather code\n\n    wmo = data[\"daily\"][\"weather_code\"]\n    # return 404 when the value is none\n    wmo = [i if not pd.isna(i) else 404 for i in wmo]\n    # get the value of precipitation\n    # the value here is in millimeter 'mm'\n\n    precipitations = data[\"daily\"][\"precipitation_sum\"]\n    # return 0 if the precipitation is None\n    precipitations_sum = [0 if value is None else value for value in precipitations]\n\n    # get the win speed\n    # the speed of wind is in km/h\n    wind_speed = data[\"daily\"][\"wind_speed_10m_max\"]\n    # return 0 if wind speed is None\n    wind_speed = [0 if value is None else value for value in wind_speed]\n\n    # get the dates :\n    # note that the date's data type is string\n    date = data[\"daily\"][\"time\"]\nelse:\n    # Display an error message if the request is failed\n    print(\"Error while getting weather data\")\n\n\n# Create a function to convert dates from strings to a specific date format.\ndef date_convert(date):\n    # date is a list with str elements\n    # return the day name and the the date and month\n    # example date_convert('18-09-2024')\n    # we get WED, 18/09\n    f_date = datetime.strptime(date, \"%Y-%m-%d\")\n    day_name = datetime.strftime(f_date, \"%A\")\n    day_month = datetime.strftime(f_date, \"%d/%m\")\n    return day_name, day_month\n\n\n# using the zip function to map the function on values of date\n# and get two lists one for days name abbreviation and the other one for the date in MM/DD format for example :\n# date = ['18-09-2024','15-11-2025']\n# we get :\n# days_name = ['Wed','Sun']\n# dates = ['18/09','15/11']\ndays_name, dates = zip(*[date_convert(i) for i in date])\n\n# generating images for each code that appears in our list:\n# Load JSON in a dictionary\nwith open(\"images.json\", \"r\") as json_file:\n    data = json.load(json_file)\n\n# create a dictionary to associated codes with description and images\nassociated_wmo = {str(key): value for key, value in data.items()}\n\n# get the image and the description from the WMO codes.\ndesc_img = []\nfor i in wmo:\n    get = associated_wmo[str(i)]\n    desc_img.append({\"desc\": get[\"desc\"], \"img\": get[\"img\"]})\n\n## insert an html code here \nhtml_code = f\"\"\"\n<head>\n   <!-- we used google fonts to get some icons -->\n   <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"link rel=\"stylesheet\">\n   <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<table class= 'Wtable'>\n   <!-- Tables header displays the day and the date in DD/MM -->\n   <tr title=\"Date\" style = \"background-color : rgb(222, 236, 252)\">\n      <th style = \"border-top:3px solid rgb(157, 216, 250);border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><strong>{days_name[0]}</strong><br> Today </th>\n      <th><strong>{days_name[1]}</strong><br> Tomorrow </th>\n      <th><strong>{days_name[2]}</strong><br> {dates[2]}</th>\n      <th><strong>{days_name[3]}</strong><br> {dates[3]}</th>\n      <th><strong>{days_name[4]}</strong><br> {dates[4]}</th>\n   </tr>\n   <!-- Second row displays an icon that represents the weather and an associated description  -->\n   <tr title = \"icons\" style=\"background-color: rgb(174, 222, 252)\">\n      <td style=\"border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><img src= \"{desc_img[0]['img']}\" title=\"{desc_img[0]['desc']}\"><strong>{desc_img[0]['desc']}</strong></td>\n      <td><img src= \"{desc_img[1]['img']}\" title=\"{desc_img[1]['desc']}\"><strong>{desc_img[1]['desc']}</strong></td>\n      <td><img src= \"{desc_img[2]['img']}\" title=\"{desc_img[2]['desc']}\"><strong>{desc_img[2]['desc']}</strong></td>\n      <td><img src= \"{desc_img[3]['img']}\" title=\"{desc_img[3]['desc']}\"><strong>{desc_img[3]['desc']}</strong></td>\n      <td><img src= \"{desc_img[4]['img']}\" title=\"{desc_img[4]['desc']}\"><strong>{desc_img[4]['desc']}</strong></td>\n   </tr>\n   <!-- Third row displays a rounded result of the minimum and the maximum temperature during the day in Celsius-->\n   <tr title = \"Min and Max Temperature\" style=\"background-color : white\">\n      <td style=\"border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><span class=\"material-icons\">thermostat</span> {round(min_temp[0])}°C - {round(max_temp[0])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[1])}°C - {round(max_temp[1])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[2])}°C - {round(max_temp[2])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[3])}°C - {round(max_temp[3])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[4])}°C - {round(max_temp[4])}°C </td>\n   </tr>\n   <!-- Fourth row in this table displays a rounded result of wind speed during the day in Km/h  -->\n   <tr title = \"Wind Speed\" style=\"background-color : rgb(222, 236, 252)\">\n      <td style=\"border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><span class=\"material-icons\">air</span> {round(wind_speed[0])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[1])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[2])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[3])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[4])} Km/h</td>\n   </tr>\n   <!-- Last row shows the amount of precipitation during the day in millimeter  -->\n   <tr title = \"Precipitation\" style=\"background-color : rgb(222, 236, 252)\">\n      <td style=\"border-bottom:3px solid rgb(157, 216, 250);border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><span class=\"material-icons\">water_drop</span> {round(precipitations_sum[0])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[1])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[2])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[3])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[4])} mm</td>\n   </tr>\n</table>\n\"\"\"\ndisplay(HTML(html_code))\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n```{python}\n#|echo : false\n# Requirements\nimport requests\nimport json\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom IPython.display import display, HTML\n\n# Get today's date.\ntoday_date = datetime.now()\n\n# Getting the next five days.\nlast_day = today_date + timedelta(days=4)\n\n# Formatting dates to YYYY-MM-DD.\ntoday_date_str = today_date.strftime(\"%Y-%m-%d\")\nlast_day_str = last_day.strftime(\"%Y-%m-%d\")\n\n# Creating URL\nurl = \"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum,wind_speed_10m_max&timezone=auto\"\nweather_url = f\"{url}&start_date={today_date_str}&end_date={last_day_str}\"\n\n# Send a GET request to the URL\nresponse = requests.get(weather_url)\n\nif response.status_code == 200:  # Check if the request was successful\n    data = response.json()\n    # getting the data as lists and deal with missing values :\n    # get maximum temperature\n    # temperature here is in Celsius\n    max_temp = data[\"daily\"][\"temperature_2m_max\"]\n    # return 0 if maximum temperature is None\n    max_temp = [0 if value is None else value for value in max_temp]\n    # get minimum temperature\n    # Same here the temperature is in Celsius\n\n    min_temp = data[\"daily\"][\"temperature_2m_min\"]\n    # return 0 if minimum value is\n    min_temp = [0 if value is None else value for value in min_temp]\n    # get the weather code\n\n    wmo = data[\"daily\"][\"weather_code\"]\n    # return 404 when the value is none\n    wmo = [i if not pd.isna(i) else 404 for i in wmo]\n    # get the value of precipitation\n    # the value here is in millimeter 'mm'\n\n    precipitations = data[\"daily\"][\"precipitation_sum\"]\n    # return 0 if the precipitation is None\n    precipitations_sum = [0 if value is None else value for value in precipitations]\n\n    # get the win speed\n    # the speed of wind is in km/h\n    wind_speed = data[\"daily\"][\"wind_speed_10m_max\"]\n    # return 0 if wind speed is None\n    wind_speed = [0 if value is None else value for value in wind_speed]\n\n    # get the dates :\n    # note that the date's data type is string\n    date = data[\"daily\"][\"time\"]\nelse:\n    # Display an error message if the request is failed\n    print(\"Error while getting weather data\")\n\n\n# Create a function to convert dates from strings to a specific date format.\ndef date_convert(date):\n    # date is a list with str elements\n    # return the day name and the the date and month\n    # example date_convert('18-09-2024')\n    # we get WED, 18/09\n    f_date = datetime.strptime(date, \"%Y-%m-%d\")\n    day_name = datetime.strftime(f_date, \"%A\")\n    day_month = datetime.strftime(f_date, \"%d/%m\")\n    return day_name, day_month\n\n\n# using the zip function to map the function on values of date\n# and get two lists one for days name abbreviation and the other one for the date in MM/DD format for example :\n# date = ['18-09-2024','15-11-2025']\n# we get :\n# days_name = ['Wed','Sun']\n# dates = ['18/09','15/11']\ndays_name, dates = zip(*[date_convert(i) for i in date])\n\n# generating images for each code that appears in our list:\n# Load JSON in a dictionary\nwith open(\"images.json\", \"r\") as json_file:\n    data = json.load(json_file)\n\n# create a dictionary to associated codes with description and images\nassociated_wmo = {str(key): value for key, value in data.items()}\n\n# get the image and the description from the WMO codes.\ndesc_img = []\nfor i in wmo:\n    get = associated_wmo[str(i)]\n    desc_img.append({\"desc\": get[\"desc\"], \"img\": get[\"img\"]})\n\n## insert an html code here \nhtml_code = f\"\"\"\n<head>\n   <!-- we used google fonts to get some icons -->\n   <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"link rel=\"stylesheet\">\n   <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<table class= 'Wtable'>\n   <!-- Tables header displays the day and the date in DD/MM -->\n   <tr title=\"Date\" style = \"background-color : rgb(222, 236, 252)\">\n      <th style = \"border-top:3px solid rgb(157, 216, 250);border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><strong>{days_name[0]}</strong><br> Today </th>\n      <th><strong>{days_name[1]}</strong><br> Tomorrow </th>\n      <th><strong>{days_name[2]}</strong><br> {dates[2]}</th>\n      <th><strong>{days_name[3]}</strong><br> {dates[3]}</th>\n      <th><strong>{days_name[4]}</strong><br> {dates[4]}</th>\n   </tr>\n   <!-- Second row displays an icon that represents the weather and an associated description  -->\n   <tr title = \"icons\" style=\"background-color: rgb(174, 222, 252)\">\n      <td style=\"border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><img src= \"{desc_img[0]['img']}\" title=\"{desc_img[0]['desc']}\"><strong>{desc_img[0]['desc']}</strong></td>\n      <td><img src= \"{desc_img[1]['img']}\" title=\"{desc_img[1]['desc']}\"><strong>{desc_img[1]['desc']}</strong></td>\n      <td><img src= \"{desc_img[2]['img']}\" title=\"{desc_img[2]['desc']}\"><strong>{desc_img[2]['desc']}</strong></td>\n      <td><img src= \"{desc_img[3]['img']}\" title=\"{desc_img[3]['desc']}\"><strong>{desc_img[3]['desc']}</strong></td>\n      <td><img src= \"{desc_img[4]['img']}\" title=\"{desc_img[4]['desc']}\"><strong>{desc_img[4]['desc']}</strong></td>\n   </tr>\n   <!-- Third row displays a rounded result of the minimum and the maximum temperature during the day in Celsius-->\n   <tr title = \"Min and Max Temperature\" style=\"background-color : white\">\n      <td style=\"border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><span class=\"material-icons\">thermostat</span> {round(min_temp[0])}°C - {round(max_temp[0])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[1])}°C - {round(max_temp[1])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[2])}°C - {round(max_temp[2])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[3])}°C - {round(max_temp[3])}°C </td>\n      <td><span class=\"material-icons\">thermostat</span> {round(min_temp[4])}°C - {round(max_temp[4])}°C </td>\n   </tr>\n   <!-- Fourth row in this table displays a rounded result of wind speed during the day in Km/h  -->\n   <tr title = \"Wind Speed\" style=\"background-color : rgb(222, 236, 252)\">\n      <td style=\"border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><span class=\"material-icons\">air</span> {round(wind_speed[0])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[1])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[2])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[3])} Km/h</td>\n      <td><span class=\"material-icons\">air</span> {round(wind_speed[4])} Km/h</td>\n   </tr>\n   <!-- Last row shows the amount of precipitation during the day in millimeter  -->\n   <tr title = \"Precipitation\" style=\"background-color : rgb(222, 236, 252)\">\n      <td style=\"border-bottom:3px solid rgb(157, 216, 250);border-right:3px solid rgb(157, 216, 250);border-left:3px solid rgb(157, 216, 250)\"><span class=\"material-icons\">water_drop</span> {round(precipitations_sum[0])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[1])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[2])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[3])} mm</td>\n      <td><span class=\"material-icons\">water_drop</span> {(precipitations_sum[4])} mm</td>\n   </tr>\n</table>\n\"\"\"\ndisplay(HTML(html_code))\n```\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Weather in Montpellier in 4 days"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}